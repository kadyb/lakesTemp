var geometry = ee.Geometry.MultiPoint(
        [[15.36, 54.13],
         [16.11, 54.25]]
);

// Function to mask clouds based on the pixel_qa band of Landsat 8 SR data
function maskL8sr(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively
  var cloudShadowBitMask = (1 << 3);
  var cloudsBitMask = (1 << 5);
  // Get the pixel QA band.
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0)
                 .and(qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image.updateMask(mask);
}

var pixelsize = 30;
var data = ee.ImageCollection('LANDSAT/LC08/C01/T1_SR')
              //.filterDate('2013-04-01', '2019-12-31')
              .filter(ee.Filter.calendarRange(4, 10, 'month'))
              .filterBounds(geometry)
              .filterMetadata('CLOUD_COVER', 'less_than', 40)
              .map(maskL8sr)
              .select(['B1', 'B2', 'B3', 'B4', 'B5', 'B6', 
                        'B7', 'B10', 'B11', 'sr_aerosol'])
              .getRegion(geometry, pixelsize);

var keys = ee.List(data.get(0));
var featureCollection = ee.FeatureCollection(data.slice(1).map(function(singleData){
  singleData = ee.List(singleData);
  var dict = ee.Dictionary.fromLists(keys, singleData);
  var point = ee.Geometry.Point([dict.get('longitude'), dict.get('latitude')]);
  return ee.Feature(point, dict);
}));

var featureCollection = featureCollection.filter(ee.Filter.notNull(keys));

Export.table.toDrive({
  collection: featureCollection,
  description: 'CSV',
  selectors: ['id', 'B1', 'B2', 'B3', 'B4','B5', 'B6',
              'B7', 'B10', 'B11', 'sr_aerosol']
});
